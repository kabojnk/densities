#!/usr/bin/env node
"use strict";

/**
 * This file will search a directory for images and auto-populate a config file
 * for use with the densities.js script.  While this does the bulk of the work, 
 * it would still be a good idea to tweak the config file and confirm that 
 * everything is in working order.
 */

var path = require("path");
var exec = require('child_process').exec;
var fs = require('fs');
var mime = require('mime');
var sourceDir = __dirname;
var outFile = "temp_config.js";

var USAGE = [
	"find_images.js",
	"   Usage: ./find_images.js SEARCH_DIRECTORY OUTFILE",
	""
].join("\n");

if (process.argv.length < 4) {
	console.log(USAGE);
	return;
} else {	
	sourceDir = process.argv[2];
	outFile = process.argv[3];
}

var images = searchForImages();

if (images.length > 0) {
	writeConfigFile(images);
}
console.log("FINISHED!");

/**
 * Does the actual search.  This does NOT recurse into directories.  Since Android's drawables filesystem
 * is flat, it’s best to keep your source directory flat as well, to prevent any overwriting of existing 
 * files with duplicate filenames.
 */
function searchForImages() {	
	console.log("Searching for images in:", path.resolve(sourceDir) + "...");	

	if (!fs.existsSync(sourceDir)) {
		console.log(sourceDir, "does not exist!\nStopping.");
		return;
	}

	var stats = fs.statSync(sourceDir);	
	if (!stats.isDirectory()) {
		console.log(sourceDir, "is not a directory!\nStopping.");
		return;
	}	

	var files = fs.readdirSync(sourceDir);
	var filteredFiles = [];
	if (!files.length) {
		console.log("No files found.");
		return;
	}
	files.forEach(function(file, index){
		console.log("Processing file #" + index + " ("+file+")...");

		// Ignore all dot-files
		if (file[0] === ".") {
			return;
		}

		// Detect MIME type
		var mimeType = mime.lookup(file);		
		switch (mimeType) {
			case 'image/jpeg':
			case 'image/svg+xml':
			case 'image/png':
				filteredFiles.push({"file": file });
				break;
			default:
				console.log("NOT AN IMAGE. Ignoring...");
				break;
		}
	});	
	return filteredFiles;
}

/**
 * Writes the actual config file.  I’d love to bolster this once I figure out where
 * I want to go with the configuration stuff... but for the time being it gets the 
 * job done.
 */
function writeConfigFile(files) {	
	var config = [
		'// AUTOGENERATED BY find_images.js',
		'exports.sourceDir = "'+sourceDir+'";',
		'exports.outputDir = "./res";',
		'',
		'exports.files = ' + JSON.stringify(files, null, 2) + ';'
	];

	// If someone's trying to be cute and write to a directory instead of a filename,
	// we'll save it as "_temp_config.js"
	if (fs.existsSync(outFile)) {
		var stats = fs.statSync(sourceDir);	
		if (stats.isDirectory()) {
			outFile += path.combine(outFile, "_temp_config.js");
		}	
	}

	// If someone's trying to be cute and output to a directory that doesn't exist,
	// we'll show them who's boss.
	var outputDir = path.dirname(outFile);
	if (!fs.existsSync(outputDir)) {
		var mkdirp = require('mkdirp');		
		mkdirp.sync(outputDir);	
	}

	fs.writeFile(outFile, config.join("\n"));
	console.log("Config file written at: ", outFile);
}